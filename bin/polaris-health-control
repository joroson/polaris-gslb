# #!/usr/bin/env python3
#!/opt/python-3.5.2/bin/python3

# -*- coding: utf-8 -*-
import argparse
import socket
import sys

import daemon

from polaris_health import config, guardian, state


# minimum version of python3 required
MINIMUM_PY3_VERSION = (3, 4, 3)
# control socket recv() buffer size
CONTROL_SOCKET_RECV_BUFF_SIZE = 256


class PolarisHealthControl:

    def __init__(self):
        # check for the minimum required py3 version
        if sys.version_info < MINIMUM_PY3_VERSION:
            min_version_str = '.'.join([str(MINIMUM_PY3_VERSION[i]) 
                           for i in range(len(MINIMUM_PY3_VERSION))])
            raise Exception('Python version {} or later is required'.
                            format(min_version_str))

        # load and validate the configuration    
        try:    
            # load polaris_health.config
            guardian.Guardian.load_configuration()
            # validate the LB configuration
            state.State(config_obj=config.LB)
        except Exception as e:
            sys.stderr.write("Configuration validation failed: {}\n".format(e))
            exit(1)

    def ping(self):
        if not self._is_running():
            exit(1)
        
    def start(self, debug=False):
        """In debug the app will not daemonize, logging level is set to debug,
        logs are sent to stdout.
        """
        if self._is_running():
            sys.stderr.write('Polaris Health is already running.\n')
            exit(1)

        if debug:
            guardian.Guardian().start(debug=True)
        else:
            # turn into a daemon, NO CODE WILL EXECUTE AFTER THIS
            with daemon.DaemonContext():
                guardian.Guardian().start()

    def start_debug(self):
        self.start(debug=True)

    def stop(self):
        if not self._is_running(): 
            sys.stderr.write('Polaris health is not running.\n')
            exit(1)

        try:
            resp = self._send_control_sock_cmd('stop')
            if resp != 'ok':
                sys.stderr.write('Unexpected response from Polaris Health: {}\n'
                                 .format(resp))
                exit(1)
        except OSError as e:
            sys.stderr.write('Failed to send the stop command to Polaris Health: {}\n'
                             .format(e))
            exit(1)

    def _is_running(self):
        try:
            if self._send_control_sock_cmd('ping') == 'pong':
                return True
            else:
                return False
        except OSError:
            return False

    def _send_control_sock_cmd(self, cmd):
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.settimeout(1)
        sock.connect(config.BASE['CONTROL_SOCKET_FILE'])
        sock.sendall(cmd.encode())
        resp = sock.recv(CONTROL_SOCKET_RECV_BUFF_SIZE).decode()
        sock.close()
        return resp


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Polaris health control")
    parser.add_argument('action',
                        choices=[
                            'ping',
                            'start',
                            'start-debug',
                            'stop',
                            ]) 
    opts = parser.parse_args()

    phc = PolarisHealthControl()

    method = opts.action.replace('-', '_')
    getattr(phc, method)()
